#!/usr/bin/env python
# vim: ft=python
"""
Description: Print currently logged in users
Authors:     Cian Brennan <lil_cain@redbrick.dcu.ie>
             Craig Gavagan <creadak@redbrick.dcu.ie>
             Cian Butler <butlerx@redbrick.dcu.ie>
Date:        Sat Oct  8 16:11:42 IST 2005
"""

from __future__ import print_function

from os import path
from pwd import getpwnam
from sys import stdout

from utmp import UtmpRecord


def get_colours(encoding=False):
    """get colour code"""
    return {
        "default": "\033[;0m" if encoding else "",
        "white_text": "\033[;035m" if encoding else "",
        "white": "\033[;45m" if encoding else "",
        "red": "\033[;41m" if encoding else "",
        "cyan": "\033[;46m" if encoding else "",
        "green": "\033[;42m" if encoding else "",
        "magenta": "\033[;44m" if encoding else "",
        "yellow": "\033[;43m" if encoding else "",
    }


def get_groups(encoding=False):
    return (
        {
            100: "\033[;31m",
            107: "\033[;36m",
            108: "\033[;32m",
            102: "\033[;33m",
            101: "\033[;34m",
            103: "\033[;0m",
        }
        if encoding
        else {100: "", 107: "", 108: "", 102: "", 101: "", 103: ""}
    )


def load_friends():
    """load users .friends file"""
    try:
        friends_file = open(path.expanduser("~/.friends"), "r")
        return [i.rstrip() for i in friends_file.readlines()]
    except IOError:
        return []


def get_logged_in_users(friends, encoding=False):
    """
    get a dict of logged in users
    returns {
        "noob": {
            "logins": 1,
            "colour": "COLOUR CODE"
        }
    }
    """
    # need a dict of users + times logged in
    logged_in_users = {}
    groups = get_groups(encoding)
    colours = get_colours(encoding)

    for user in UtmpRecord():
        if user.ut_type == 7:
            user = user.ut_user
            if user in logged_in_users:
                logged_in_users[user]["logins"] = logged_in_users[user]["logins"] + 1
            else:
                group = getpwnam(user)[3]
                logged_in_users[user] = {
                    "logins": 1,
                    "colour": colours["white_text"]
                    if user in friends and group != 100
                    else groups.get(group, colours["default"]),
                }

    return logged_in_users


def print_users(logged_in_users, encoding=False):
    """ Pretty Print"""
    title_message = (
        "\033[;31mTotal \033[;0mNumber \033[;33mof \033[;34mUsers \033[;35monline\033[;0m:"
        if encoding
        else "Total Number of Users Online:"
    )
    colours = get_colours(encoding)

    print(
        "                         %s %s\n"
        % (title_message, len(logged_in_users.keys())),
        "                      %s %s friends   %s %s committee  %s %s  associate\n"
        % (
            colours["white"],
            colours["default"],
            colours["red"],
            colours["default"],
            colours["cyan"],
            colours["default"],
        ),
        "                      %s %s society   %s %s club       %s %s guest"
        % (
            colours["magenta"],
            colours["default"],
            colours["yellow"],
            colours["default"],
            colours["green"],
            colours["default"],
        ),
        "\n     ",
        end=" ",
    )
    # go through and print the users.
    # we only want 5 users for a line which is what iter is for
    itera = 0
    for user in sorted(logged_in_users.keys()):
        itera = itera + 1

        # two format strings, to take a/c of users with >10 sessions
        print(
            (
                "%s%s \033[;0m\033[;032m(\033[;033m%d\033[;032m) "
                if logged_in_users[user]["logins"] < 10
                else "%s%s\033[;0m\033[;032m(\033[;033m%d\033[;032m) "
            )
            % (
                logged_in_users[user]["colour"],
                user.ljust(8)[:8],
                logged_in_users[user]["logins"],
            ),
            end=" ",
        )
        if itera >= 5:
            itera = 0
            print("\n     ", end=" ")
    # reset to default colour for stupid terms
    print(colours["default"])


if __name__ == "__main__":
    ENCODING = stdout.encoding is not None
    print_users(get_logged_in_users(load_friends(), ENCODING), ENCODING)
